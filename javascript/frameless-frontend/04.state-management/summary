---
A. MVC


M(model) -> model/model.js
V(view) -> view/*.js
C(controller) -> index.js


model에서는 state 있고, state를 관리하는 메서드들이 있음. 얘네들을
controller에서 factory 형태로 받아서, state를 관리하는 이벤트로 한번 더 감싸줌. 이걸 view로 보냄.
view에서는 각 상태에 맞게 view/app.js, view/counter.js, view/filter.js view/todos.js의 템플렛에 넣어 render()함.


model에 business logic과, 그것에 관한 test code를 넣어서 관리.
MVC 관심사의 분리가 atomic하게 되어있다.





---
B. Reactive Programming




Q. what is reactive programming?

A. application이 'Observerable'하다.
왜? 객체/데이터 observe하다가, 바뀌었을 때, 바로 반응하는게 reactive programming.


Q. how?

model에서 state를 관리하고, state를 관리하는 메서드들을 MVC에서는 controller layer에서 event로 감쌓서 view에게 던져줬다면,

reactive-programming 식은, model layer에 observable.js가 따로 있어서, 여기에서 event로 한번 감싸는걸 proxy를 써서 한다.

model <- proxy -> controller -> view

이런식이다.


Q. why wrap with proxy?

observable.js에 wrapAction을 보면, 해당 event가 call되었을 때, model에 state manage method를 발동시키는데, 발동시킨 이후, value반환 직전에 invokeListeners(); 를 실행하여,

  const invokeListeners = () => {
    const data = freeze(stateGetter())
    listeners.forEach(l => l(data))
  }

state의 원본 데이터와 원본 state에 딸린 listener들을 실행시키는데,

약간 java의 AOP 느낌으로다가, 특정 객체, 메서드가 실행되는지 observe하다가, 실행되면 거기에 덧붙여져서 실행되어야 하는 코드를 저기에 넣는 듯 하다.


AOP처럼 모든 기능을 모듈적으로 만들고, observer에다가 필요기능을 AOP처럼 추가시키는 식으로 하면,
코드의 일관성이 있기 때문에, 코드 이해할 땐 predictable-format이 도움 되긴 하겠으나,

프로젝트 규모가 커져서 복잡해지면, observer에 걸린 메서드들 다 다른 폴더에 있을테니 타고타고 이리저리 왔다갔다해서 정신없을 듯 하다.

또한 AOP하기 적절한 기능들도 있지만(logging, performance checking, etc) 추상화로 명확하게 나누기 어려운 기능개발할 땐, reactive-programming이 효과적인지 의문이다.




Q. MVC vs Reactive Programming?


MVC는 약간 client에서 요청을 하면, 서버에서 controller가 요청 받아 model로 적합한 state manage한 후, view로 render해서 보내주는 느낌이라면,

Reactive Programming은 애초에 server->client로 보내줄 때, DOM에 .addEventListener() 달아서, 여기에서 특정 행동이 일어난게 observe되면, 그 때 client->server로 요청하는 느낌인듯?







---
C.Redux




Q. what is redux?


redux's 3 principles

1. all states of app managed in a single object, in tree structure
	- better when debugging
	- easier to implement undo/redo
2. state is read-only
	- only way to change state is passing 'action' object
	- this is how passing 'action' object looks like below.
	store.dispatch({
	  type: 'COMPLETE_TODO',
	  index: 1
	})

	store.dispatch({
	  type: 'SET_VISIBILITY_FILTER',
	  filter: 'SHOW_COMPLETED'
	})
3. should use reducer when changing state
	- 순수 상태 유지하기 위해 reducer 씀.
	- reducer란, 이전 state 받아서 'action' 하여 새로운 state를 반환하는 함수.




Q. what is this code?


reducer에서 'action' 메서드, 즉 state를 manage할 메서드들을 정의하고, methods라는 객체에 담아,
reducer(prevState, action); 을 반환함.

state는 controller인 index.js에서 정의되어 view에 DOM이랑 reducer와 함께넘겨주면,
view단에 각 componenet에서 model/actionCreators.js를 받아 action method에 정의한 대로 addEventHandler()를 한다.

예를들어, todos DOM에 특정 버튼 키가 눌리면, 해당 키에 달린 이벤트리스너가 reducer(prevState, action)을 발동하는 식.



Q. state에 두 메서드가 setter로 동시접근하면 어떻게 됨?


아마 node가 내부적으로는 멀티쓰레드(4쓰레드였나?) 여도, 어찌됬든 싱글 쓰레드 queue로 돌기 때문에,reducer에 'action' object를 받는 이유도, single thread queue에 순차적으로 받고 순차처리 해서 race condition 없게끔 하기 때문에 이런 state를 순수상태로 가져가는 시도를 할 수 있었던게 아닐까?




---
D. State Management with Web Components
